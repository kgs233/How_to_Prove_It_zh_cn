#import "lib.typ": *

#counter(page).update(1)

= 前言

数学和计算机科学的学生，常常在第一次被要求认真处理数学证明时遇到困难，因为他们不知道“游戏规则”是什么。如果有人要求你证明一个结论，你需要做到什么？正确的证明与错误的证明之间的区别在哪里？
本书的目的就是通过详细阐述构造证明时所涉及的基本原则，帮助学生找到这些问题的答案。

许多学生第一次接触数学证明，是在高中的几何课程中。不幸的是，高中几何通常把证明教成“一个带编号的陈述与理由的列表”，这种看待证明的方式过于狭隘，因而不太有用。这里可以借助计算机科学的一个类比来说明。早期的编程语言也鼓励人们把计算机程序看作是一个带编号的指令列表。然而，如今计算机科学家已经摆脱了这样的语言，转而使用一些鼓励“结构化编程”的方法的语言来教授编程。本书对证明的讨论，正是基于这样一种信念：促使计算机科学家接受结构化编程的许多考虑，同样也适用于证明写作。你可以说，这本书是在教授“结构化证明”。

在结构化编程中，计算机程序并不是通过简单地把指令一条接一条地罗列出来构造的，而是通过组合一些基本的结构来完成的，比如 Java 编程语言中的 if-else 结构和 do-while 循环。这些结构不仅可以顺序排列，还可以嵌套使用。例如，一个程序如果通过在 do-while 循环中嵌套一个 if-else 结构来构造，看起来就会是这样的：

#codeblock[
  if [条件] \
  #tab() [指令列表] \
  else \
  #tab() [备选指令列表] \
  while [条件]
] \
在这个程序框架中，缩进并不是绝对必要的，但它是一种在计算机科学中经常使用的、用来展示程序底层结构的方便方法。

数学证明同样是通过组合某些基本的证明结构来构造的。
例如，要证明一个形如 “如果 $P$ 那么 $Q$” 的命题，通常会使用一种可以称为“假设—直到”的结构：我们假设 $P$ 为真，直到能够得出 $Q$ 为真的结论，此时我们撤销这个假设，并得出“如果 $P$ 那么 $Q$”为真的结论。
另一个例子是“对任意 $x$ 证明”的结构：要证明一个形如 “对所有 $x$，$P(x)$” 的命题，我们_声明 x 是一个任意对象 _，然后证明 $P(x)$。一旦得出 $P(x)$ 为真的结论，我们撤销关于 x 任意性的声明，并得出“对所有 $x$，$P(x)$”为真的结论。
此外，为了证明更复杂的命题，这些结构通常不仅通过依次排列来组合，而且还会通过嵌套的方式来组合。
例如，要证明一个形如 “对所有 $x$，若 $P(x)$ 则 $Q(x)$” 的命题，我们可能会将“假设—直到”结构嵌套在“对任意 $x$ 证明”的结构中，从而得到如下形式的证明：

#codeblock[
  设$x$为任意值 \
  #tab() 假设$P(x)$为真 \
  #tab() #tab() [$Q(x)$的证明在此处] \
  #tab() 因此，如果$P(x)$成立，则$Q(x)$成立 \
  因此，对于任意$x$，如果$P(x)$成立，则$Q(x)$成立
] \
和之前一样，我们使用缩进来使证明的底层结构更加清晰。

当然，数学家在实际写证明时并不会采用这种缩进的形式。本书的目标是教会学生像数学家一样，用普通的段落来书写证明，而不是使用缩进形式。
然而，我们的方法基于这样一种信念：如果学生要成功撰写此类证明，他们必须理解证明所具有的底层结构。
例如，他们必须明白，像“令 $x$ 是任意的”以及“假设 $P$”这样的句子，并不是证明中的孤立步骤，而是用来引入“对任意 $x$ 证明”以及“假设—直到”这种证明结构的。
初学者常常会在其它地方不恰当地使用这些句子。这样的错误类似于编程中出现的错误：写了一个“do”却没有与之匹配的“while”。

请注意，在我们的例子中，证明结构的选择是由所要证明命题的逻辑形式所决定的。基于这一点，本书从初等逻辑入手，以便让学生熟悉数学命题可能呈现的各种形式。第一章讨论逻辑联结词，第二章介绍量词。这两章同时也介绍集合论的基础知识，因为集合论不仅在本书的后续部分（乃至整个数学领域）都会用到，而且它还能很好地用来说明本章所讲的许多逻辑要点。

第三章系统地讲述了结构化的证明技巧，依次分析数学命题可能的各种形式，并讨论每一种形式所对应的证明结构。本章中的证明例子，大部分并不是因其数学内容而被选择的，而是因为它们能够很好地体现相应的证明结构。尤其是在本章开头，只介绍了少数几种证明技巧的时候，许多证明例子在数学上显得相当琐碎。但随着章节的推进，证明会变得更复杂，也在数学上更有趣。

第四章和第五章讨论关系与函数，目的有二：一是为学生提供练习第三章证明写作技巧的素材，二是让学生接触数学各个分支中都会用到的一些基本概念。

第六章专门讲述一种在数学和计算机科学中都非常重要的证明方法：数学归纳法。本章的讲解建立在第三章的技巧之上，学生在读到这里时，应该已经掌握了那些技巧。

在完成第六章之后，学生就应该准备好接触更为重要的数学主题了。本书在第七章和第八章中介绍了两个这样的主题。第七章（这是第三版新增的内容）介绍了数论，第八章讨论无限基数。这两章不仅为学生提供了更多练习数学证明的机会，同时也让他们对高等数学的样貌有所一窥。

本书每一章的每一个小节结尾都会附上一组习题。其中一些习题用星号标记，解答或提示可在附录中找到。带有 $P_D$ 符号的习题则可以使用 Proof Designer 软件来完成，该软件可以在互联网上免费获得。

本第三版最大的变化是新增了一章关于数论的内容，并增加了150多个练习题。第四章中关于关系的自反闭包、对称闭包和传递闭包的内容已被删除（不过这些主题现在出现在第4.4节的一些习题中）；取而代之的是第五章新增了一个关于函数下集合闭包的章节。此外，全书还有许多小的修改。

我想感谢所有对本书早期版本提出意见的人。特别感谢 John Corcoran 和 Raymond Boute 提出的多条有益建议。我也感谢 Jonathan Sands 以及几位匿名审稿人的指导。
