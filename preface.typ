#import "lib.typ": *

#counter(page).update(1)

= 前言

数学和计算机科学专业的学生在第一次被要求认真进行数学证明时，往往会遇到困难，因为他们
不了解“游戏规则”。如果你被要求证明某件事，人们对你有什么期望？正确的证明与错误的证明
有何区别？本书旨在通过阐述证明构建过程中涉及的
基本原理，帮助学生解答这些问题。

许多学生第一次接触数学证明是在高中
几何课程中。遗憾的是，高中几何课程中
的学生通常被教导将证明视为一个编号的陈述和
理由列表，这种对证明的看法过于狭隘，难以真正有用。这里与计算机科学有一个
可供借鉴的平行案例。早期编程
语言鼓励将计算机程序视为编号的指令列表，这种对程序的看法同样过于狭隘。如今，计算机科学家已放弃此类语言，转而使用
鼓励“结构化编程”方法的语言来教授编程。本书中对证明的讨论
受到这样一种信念的启发：即促使计算机科学家采纳结构化编程方法
的许多考量因素，同样适用于证明写作。可以说，本书教授的是
“结构化证明”。

在结构化编程中，计算机程序的构建并非通过依次列出指令，而是通过组合某些基本结构，如Java编程语言中的if-else结构和do-while循环。
这些结构的组合不仅可以通过依次列出它们来实现，还可以通过将一个结构嵌套在另一个结构中来实现。例如，通过将if-else结构嵌套在do-while循环中构建的程序将如下所示：

#codeblock[
  if [条件] \
  #tab() [指令列表] \
  else \
  #tab() [备选指令列表] \
  while [条件]
] \
本程序大纲中的缩进并非绝对必要，但它是计算机科学中常用的便捷方法，用于展示程序的底层结构。

数学证明也是通过组合某些基本证明结构构建的。
例如，对形式为“如果 $P$ 则 $Q$ ”的陈述的证明通常使用所谓的“假设-直到”结构：
我们假设 $P$为真，直到能够得出$Q$为真的结论，此时我们撤回这一假设并得出“如果 $P$ 则 $Q$ ”为真的结论。
另一个例子是“对任意 $x$ 证明”结构：要证明形式为“对所有 $x$，$P(x)$ ”的陈述，我们声明 $x$ 为任意对象，然后证明 $P(x)$。
一旦得出 $P(x)$ 为真的结论，我们就撤回对 $x$ 为任意对象的声明，并得出“对所有 $x$，$P(x)$ ”为真的结论。此外，为了证明更复杂的陈述，这些结构通常会被结合使用，不仅是依次列出，还是将一个结构嵌套在另一个结构中。例如，为了证明形式为“对于所有 $x$，如果 $P(x)$ 则 $Q(x)$ ”的陈述，我们可能会将“假设-直到”结构嵌套在“对于任意 $x$ 证明”结构中，得到如下形式的证明：

#codeblock[
  设$x$为任意值 \
  #tab() 假设$P(x)$为真 \
  #tab() #tab() [$Q(x)$的证明在此处] \
  #tab() 因此，如果$P(x)$成立，则$Q(x)$成立 \
  因此，对于任意$x$，如果$P(x)$成立，则$Q(x)$成立
] \
与之前一样，我们使用缩进来清晰地展示证明的内在结构。

当然，数学家通常不会以这种缩进形式撰写证明。
本书的目的是教导学生以普通英语段落的形式撰写证明，正如数学家所做的那样，而非采用缩进形式。
然而，我们的方法基于这样一种信念：如果学生要成功撰写此类证明，他们必须理解证明所具有的底层结构。他们必须学会，例如，“设 $x$ 为任意”和“假设 $P$ ”并非证明中的孤立步骤，而是用于引入“对任意 $x$ 证明”和“假设-直到”证明结构。初学者常会以其他不恰当的方式使用这些句子。此类错误类似于编程中的错误，即使用了“do”语句却没有与之匹配的“while”语句。

请注意，在我们的示例中，证明结构的选择是由待证明陈述的逻辑形式决定的。因此，本书从初等逻辑开始，以使学生熟悉数学陈述的各种形式。第一章讨论逻辑连接词，量词在第二章中被引入。这些章节还介绍了集合论的基础，因为它是本书其余部分（以及整个数学领域）中一个重要的主题，同时也因为它有助于阐明这些章节中讨论的许多逻辑要点。

第三章系统地介绍了结构化证明技术，涵盖了数学陈述可能采取的各种形式，并讨论了适用于每种形式的证明结构。本章中的证明示例大多不是因其数学内容而被选中，而是因其展示的证明结构。这一点在章首尤为明显，因为此时仅讨论了少数几种证明技术，因此本章这一部分的许多证明相对简单。随着章节的推进，证明的复杂性和数学趣味性逐渐提升。

第四章和第五章，关于关系和函数，有两个目的。首先，它们提供了学生可以练习第三章中证明写作技巧的内容。其次，它们向学生介绍了在数学所有分支中使用的一些基本概念。

第六章专门讨论一种在数学和计算机科学中都非常重要的证明方法：
数学归纳法。本章的讲解基于第三章中介绍的技术，学生到此阶段应已掌握这些技术。

最后，在第七章中，本书其他章节中的许多想法被整合在一起，用于证明书中一些最困难且最有趣的定理。

我要感谢所有阅读过本书早期草稿并提出许多有益改进建议的人，特别是剑桥大学出版社的劳伦·考尔斯，我的同事杜安·贝利教授及其离散数学课程的同学们，他们试用了某些章节的早期版本，最后我要感谢我的妻子雪莉，没有她持续的鼓励，这本书就不会问世。
#pagebreak()

#align(center)[第二版前言]

我要感谢所有向我提供第一版反馈意见的人。
这些反馈意见导致了文本中的一系列小改动。
然而，第一版与第二版之间最大的区别在于新增了超过200道新习题。此外，附录中还收录了部分习题的解答。附有解答的练习题以星号标记。
在大多数情况下，提供的解答是完整的解答；在某些情况下，解答可能是解答的概要或提示。

第三章和第四章中的部分练习题还标有符号pd。
这表明这些习题可使用Proof Designer软件解决。
Proof Designer是一款计算机软件，可帮助用户根据本书讨论的方法，撰写初等集合论证明的大纲。
有关Proof Designer的更多信息，可查阅附录，或访问Proof Designer官网：http://www.cs.amherst.edu/∼djv/pd/pd.html 。